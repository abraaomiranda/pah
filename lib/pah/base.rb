require "rails"
require "colored"
require "bundler"

module Pah
  class Base < Rails::Generators::Base
    include Singleton

    source_root File.expand_path("../partials", __FILE__)

    attr_accessor :app_name

    def template_root
      File.expand_path(File.join('..', 'pah'), File.dirname(__FILE__))
    end

    def partials
      File.join(template_root, 'templates')
    end

    def static_files
      File.join(template_root, 'files')
    end

    # Copy a static file from the template into the new application
    def copy_static_file(path)
      remove_file path
      create_file path, File.read(File.join(static_files, path))
    end

    def apply_n(partial_name, message='')
      puts message.magenta

      in_root do
        Bundler.with_clean_env do
          require "#{partials}/#{partial_name}.rb"
          "::Pah::Templates::#{partial_name.to_s.classify}".constantize.instance.call
        end
      end

      puts "\n"
    end

    def will_you_like_to?(question)
      answer = ask("Will you like to #{question} [y,n]".red)
      case answer.downcase
      when "yes", "y"
        true
      when "no", "n"
        false
      else
        will_you_like_to?(question)
      end
    end

    def ask_unless_test(*params)
      ask(*params)
    end

    def git_commit(message)
      message = "#{message}\n\nGenerated by pah version #{Pah::VERSION}"
      git commit: "-qm '#{message}'"
    end
  end
end
